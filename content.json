{"meta":{"title":"FeatherBlaze 博客","subtitle":"达成成就：超越生死！","description":"达成成就：超越生死！FeatherBlaze博客，分享实用的软件、教程、技巧……欢迎阅读！\\(^_^)/","author":"FeatherBlaze","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2025-05-24T04:38:19.400Z","updated":"2025-05-04T06:50:34.558Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2025-05-24T04:38:19.400Z","updated":"2025-05-03T02:08:44.456Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有公告","date":"2025-05-24T04:38:19.401Z","updated":"2025-05-04T07:13:13.564Z","comments":true,"path":"announcements/index.html","permalink":"http://example.com/announcements/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2025-05-24T04:38:19.402Z","updated":"2025-05-04T06:46:08.056Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2025-05-24T04:38:19.402Z","updated":"2025-05-03T11:01:01.323Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"一些链接。","text":"一些链接。 更多链接陆续添加中…"},{"title":"所有标签","date":"2025-05-24T04:38:19.407Z","updated":"2025-05-03T02:12:31.564Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"这五种方法，让你和极域说再见！","slug":"kill-mythware","date":"2025-07-16T12:04:25.000Z","updated":"2025-07-16T14:14:46.358Z","comments":true,"path":"2025/07/16/kill-mythware/","permalink":"http://example.com/2025/07/16/kill-mythware/","excerpt":"","text":"每天上信息课总要被极域所困扰，上网限制、U盘限制、让人毫无防备的屏幕广播……今天就结束五种方法，让你逃脱所以限制！建议方法2配合方法3或方法4使用。 1. 结束极域进程在cmd（或PowerShell）中输入下面命令即可结束极域进程。 1TASKKILL /IM StudentMain.exe /T /F 2. 上网&amp;插U盘 前两条终止网络限制服务和进程，最后两条终止文件限制服务和进程 打开cmd（或PowerShell），输入下面的代码即可直接上网、插U盘！ 1234sc stop TDNetFilterTASKKILL /IM MasterHelper.exe /F /Tsc stop TDFileFilterTASKKILL /IM ProcHelper64.exe /F /T 重新打开极域后需要重启重新操作 将结束极域进程代码保存在bat文件，放在E盘，开机时立刻打开E盘，连续打开文件，就可以上网、插U盘了！ 3. 退出屏幕广播 这种方法无法上网、插U盘，建议配合方法2 准备：打开任务管理器（右键“开始”按钮&amp;右键任务栏&amp;Win+X&amp;Ctrl+Shift+Esc），选项&gt;勾选置于顶层，将标题栏拖到任务栏，使窗口标题栏不露出任务栏。 退出屏幕广播并结束极域进程：屏幕广播后，将任务管理器拖出，结束“Windows 进程”下的“Windows 登录应用程序”，勾选“放弃未保存的数据并关闭”并单击“关闭”（这将会关闭所有打开的应用），等待一会儿（可能会黑屏）。 4. 拒绝教师连接 这种方法无法上网、插U盘，只能使你无法被投送屏幕广播、无法被监视屏幕，且教师端能够察觉 打开极域安装目录，找到并打开SpecialSet.exe，勾选Use IP Broadcast，教师将无法连接你。 5. 强制删除极域先下载HiBit Uninstaller（便捷版可以装在U盘里），“Installable version”是安装版，“Portable version”是便捷版（解压即可，无需安装）。打开后找到极域，右键，选择强制删除。删除后勾选“高级扫描”，扫描后直接点击“完成”清除残留。 6. 其他方法（By 哔哩哔哩 @爱玩电脑的cmd-本尊） 这些方法无法上网&amp;插U盘 《论关闭极域的n种方法（卡Bug篇）》（哔哩哔哩 @爱玩电脑的cmd-本尊）《论关闭极域的n种方法（进阶版）》（哔哩哔哩 @爱玩电脑的cmd-本尊）","categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"},{"name":"极域课堂","slug":"教程/极域课堂","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/%E6%9E%81%E5%9F%9F%E8%AF%BE%E5%A0%82/"}],"tags":[{"name":"极域","slug":"极域","permalink":"http://example.com/tags/%E6%9E%81%E5%9F%9F/"}]},{"title":"FOI2025算法夏令营C班day4——基础动态规划2：区间DP与背包 参考答案","slug":"foi2025-qjdpybb","date":"2025-07-16T11:42:45.000Z","updated":"2025-07-16T14:42:15.245Z","comments":true,"path":"2025/07/16/foi2025-qjdpybb/","permalink":"http://example.com/2025/07/16/foi2025-qjdpybb/","excerpt":"","text":"代码仅供参考·2025年7月16日8时30分(Day4)·基础动态规划2：区间DP与背包·C++最后更新于：2025-07-16 20:55:19 | 部分内容由Qwen生成优先完成标注有【基础】的题目。 #A. CDay4P9 前缀和【基础】123456789101112131415161718#include&lt;iostream&gt;using namespace std;int n, q, a[100001], s[100001];int main() &#123; cin &gt;&gt; n &gt;&gt; q; for (int i=1; i&lt;=n; i++) &#123; cin &gt;&gt; a[i]; s[i] = s[i-1]+a[i]; &#125; while (q--) &#123; int x, y; cin &gt;&gt; x &gt;&gt; y; cout &lt;&lt; s[y]-s[x-1] &lt;&lt; endl; &#125; return 0;&#125; #B. CDay4P8 石子合并（弱化版）【基础】12345678910111213141516171819202122232425262728#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;climits&gt;using namespace std;int main() &#123; int n; cin &gt;&gt; n; vector&lt;int&gt; m(n); for (int i=0; i&lt;n; i++) &#123; cin &gt;&gt; m[i]; &#125; vector&lt;int&gt; pre_sum(n+1, 0); for (int i=1; i&lt;=n; i++) &#123; pre_sum[i] = pre_sum[i-1]+m[i - 1]; &#125; vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n, 0)); for (int len=2; len&lt;=n; len++) &#123; for (int i=0; i&lt;=n-len; i++) &#123; int j = i+len-1; dp[i][j] = INT_MAX; for (int k=i; k&lt;j; k++) &#123; dp[i][j] = min(dp[i][j], dp[i][k]+dp[k+1][j]+(pre_sum[j+1]-pre_sum[i])); &#125; &#125; &#125; cout &lt;&lt; dp[0][n-1]; return 0;&#125; #C. CDay4P7 [NOI1995] 石子合并12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;climits&gt;using namespace std;int main() &#123; int n; cin &gt;&gt; n; vector&lt;int&gt; stones(n*2); for (int i=0; i&lt;n; i++) &#123; cin &gt;&gt; stones[i]; stones[i+n] = stones[i]; &#125; vector&lt;int&gt; sum(n*2+1, 0); for (int i=1; i&lt;=n*2; i++) &#123; sum[i] = sum[i-1]+stones[i-1]; &#125; vector&lt;vector&lt;int&gt;&gt; dp_min(n*2, vector&lt;int&gt;(n*2, INT_MAX)); vector&lt;vector&lt;int&gt;&gt; dp_max(n*2, vector&lt;int&gt;(n*2, INT_MIN)); for (int i=0; i&lt;n*2; i++) &#123; dp_min[i][i] = 0; dp_max[i][i] = 0; &#125; for (int len=2; len&lt;=n; len++) for (int i=0; i&lt;=n*2-len; i++) &#123; int j = i+len-1; for (int k=i; k&lt;j; k++) &#123; dp_min[i][j] = min(dp_min[i][j], dp_min[i][k] + dp_min[k + 1][j] + sum[j + 1] - sum[i]); dp_max[i][j] = max(dp_max[i][j], dp_max[i][k] + dp_max[k + 1][j] + sum[j + 1] - sum[i]); &#125; &#125; int min_score = INT_MAX; int max_score = INT_MIN; for (int i=0; i&lt;n; i++) &#123; min_score = min(min_score, dp_min[i][i+n-1]); max_score = max(max_score, dp_max[i][i+n-1]); &#125; cout &lt;&lt; min_score &lt;&lt; endl &lt;&lt; max_score; return 0;&#125; #D. CDay4P5 双端取数游戏12345678910111213141516171819202122232425#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt; using namespace std;int main() &#123; int N; cin &gt;&gt; N; vector&lt;int&gt; nums(N); for(int i=0; i&lt;N; i++) &#123; cin &gt;&gt; nums[i]; &#125; vector&lt;vector&lt;long long&gt;&gt; dp(N,vector&lt;long long&gt;(N, 0)); for(int i=0; i&lt;N; i++) &#123; dp[i][i] = nums[i]; &#125; for(int len=2; len&lt;=N; len++) &#123; for(int i=0; i&lt;=N-len; i++) &#123; int j = i+len-1; dp[i][j] = max(nums[i]-dp[i+1][j], nums[j]-dp[i][j-1]); &#125; &#125; cout &lt;&lt; dp[0][N-1]; return 0;&#125; #E. CDay4P10 [NOIP 2005 普及组] 采药【基础】12345678910111213141516171819#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;int main() &#123; int t, m; cin &gt;&gt; t &gt;&gt; m; vector&lt;int&gt; dp(t+1, 0); for(int i=0; i&lt;m; i++) &#123; int time, value; cin &gt;&gt; time &gt;&gt; value; for(int j=t; j&gt;=time; j--) &#123; dp[j] = max(dp[j], dp[j-time]+value); &#125; &#125; cout &lt;&lt; dp[t] &lt;&lt; endl; return 0;&#125; #F. CDay4P1 平均数取数问题1234567891011121314151617181920212223#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main() &#123; int n, a; cin &gt;&gt; n &gt;&gt; a; vector&lt;int&gt; x(n); for(int i=0; i&lt;n; i++) cin &gt;&gt; x[i]; vector&lt;vector&lt;long long&gt;&gt; dp(n+1, vector&lt;long long&gt;(n*50+1, 0)); dp[0][0] = 1; for(int i = 0; i &lt; n; i++) for(int j = n - 1; j &gt;= 0; j--) for(int s = n * 50; s &gt;= 0; s--) if(dp[j][s]) dp[j + 1][s + x[i]] += dp[j][s]; long long ans = 0; for(int i=1; i&lt;=n; i++) &#123; int sum = i*a; if(sum &lt;= n*50) ans += dp[i][sum]; &#125; cout &lt;&lt; ans; return 0;&#125; #G. CDay4P2 混合药剂1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;climits&gt;using namespace std;int main() &#123; int n, ma, mb; cin &gt;&gt; n &gt;&gt; ma &gt;&gt; mb; vector&lt;vector&lt;long long&gt;&gt; cost(401, vector&lt;long long&gt;(401, LLONG_MAX)); cost[0][0] = 0; for(int i=0; i&lt;n; i++) &#123; int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; vector&lt;vector&lt;long long&gt;&gt; tmp = cost; for(int j=0; j&lt;=400; j++) for(int k=0; k&lt;=400; k++) if(cost[j][k] != LLONG_MAX) &#123; int na=j+a, nb=k+b; if(na&lt;=400 &amp;&amp; nb&lt;=400) tmp[na][nb] = min(tmp[na][nb], cost[j][k]+c); &#125; cost = tmp; &#125; long long ans = LLONG_MAX; for(int i=1; i&lt;=400; i++) for(int j=1; j&lt;=400; j++) if((long long)i*mb == (long long)j*ma) ans = min(ans, cost[i][j]); if(ans == LLONG_MAX) cout &lt;&lt; -1; else cout &lt;&lt; ans; return 0;&#125; #H. CDay4P3 超大背包1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;const int MAXN = 100001;int main() &#123; int n, w; cin &gt;&gt; n &gt;&gt; w; vector&lt;long long&gt; dp(MAXN+1, 1e18); dp[0] = 0; for(int i=0; i&lt;n; i++) &#123; int wi, vi; cin &gt;&gt; wi &gt;&gt; vi; for(int j = MAXN; j &gt;= vi; j--) &#123; dp[j] = min(dp[j], dp[j-vi]+wi); &#125; &#125; int ans = 0; for(int i=MAXN; i&gt;=0; i--) &#123; if(dp[i] &lt;= w) &#123; ans = i; break; &#125; &#125; cout &lt;&lt; ans; return 0;&#125; #I. CDay4P4 分糖方案1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int MOD = 1000000007;int main() &#123; int n, k; cin &gt;&gt; n &gt;&gt; k; int a[105]; for(int i=0; i&lt;n; i++) cin &gt;&gt; a[i]; int dp[100005]; int tmp[100005]; memset(dp, 0, sizeof(dp)); dp[0] = 1; for(int i=0; i&lt;n; i++) &#123; memcpy(tmp, dp, sizeof(dp)); for(int j=0; j&lt;=k; ++j) dp[j] = 0; long long sum = 0; for(int j=0; j&lt;=k; j++) &#123; int l=min(j, a[i]), start=max(0, j - l); sum = (sum+tmp[j])%MOD; if(j &gt; a[i]) sum = (sum-tmp[j-a[i]-1]+MOD)%MOD; if(j &gt;= 0) dp[j] = sum; &#125; &#125; cout &lt;&lt; dp[k]; return 0;&#125; #J. CDay4P6 建塔1234567891011121314151617181920212223242526272829303132333435363738#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;struct brick &#123; int w, s, v;&#125;;bool x (brick a, brick b) &#123; return a.s+a.w &lt; b.s+b.w;&#125;int main() &#123; int n; cin &gt;&gt; n; brick b[1005]; for(int i=0; i&lt;n; i++) &#123; cin &gt;&gt; b[i].w &gt;&gt; b[i].s &gt;&gt; b[i].v; &#125; sort(b, b+n, x); long long dp[50005]; for(int i=0; i&lt;50005; i++) &#123; dp[i] = -1; &#125; dp[0] = 0; for(int i=0; i&lt;n; i++) for(int j=50004; j&gt;=0; j--) if(dp[j]!=-1 &amp;&amp; (long long)j&lt;=b[i].s) if(dp[j+b[i].w] &lt; dp[j]+b[i].v) dp[j+b[i].w] = dp[j]+b[i].v; long long ans = 0; for(int i=0; i&lt;50005; i++) if(dp[i] &gt; ans) ans = dp[i]; cout &lt;&lt; ans; return 0;&#125;","categories":[{"name":"FOI2025","slug":"FOI2025","permalink":"http://example.com/categories/FOI2025/"}],"tags":[{"name":"答案","slug":"答案","permalink":"http://example.com/tags/%E7%AD%94%E6%A1%88/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"FOI2025算法夏令营C班day3——基础动态规划1：线性DP 参考答案","slug":"foi2025-xxdp","date":"2025-07-15T10:09:13.000Z","updated":"2025-07-16T14:42:47.173Z","comments":true,"path":"2025/07/15/foi2025-xxdp/","permalink":"http://example.com/2025/07/15/foi2025-xxdp/","excerpt":"","text":"代码仅供参考·2025年7月15日8时30分(Day3)·基础动态规划1：线性DP·C++最后更新于：2025-07-16 22:42:45 | 部分内容由Qwen生成所有大数据版本的题目选做。 #A. CDay3P9 梅花桩【基础】1234567891011121314151617181920212223#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;int n,k;const int N = 1e5+10;int f[N], h[N];int main() &#123; cin &gt;&gt; n &gt;&gt; k; f[1] = 0; for (int i=1; i&lt;=n; i++) cin &gt;&gt; h[i]; f[2] = abs(h[2]-h[1]); for (int i=3; i&lt;=n; i++) &#123; f[i] = 0x3f3f3f3f; for (int j=1; j&lt;i&amp;&amp;j&lt;=k; j++) &#123; f[i] = min(f[i-j]+abs(h[i]-h[i-j]), f[i]); &#125; &#125; cout&lt;&lt;f[n]; return 0;&#125; #B. CDay3P4 ab斐波那契数列【基础】1234567891011121314#include &lt;iostream&gt;using namespace std;int main() &#123; long long f[1001]=&#123;0, 1, 1&#125;, a, b, n, m; cin &gt;&gt; a &gt;&gt; b &gt;&gt; n &gt;&gt; m; for (int i=3; i&lt;=n; i++) &#123; f[i] = (a*f[i-1]%m+b*f[i-2]%m)%m; &#125; for (int i=1; i&lt;=n; i++) &#123; cout &lt;&lt; f[i] &lt;&lt; &#x27; &#x27;; &#125; return 0;&#125; #C. CDay3P10 [NOIP 2008 提高组] 传纸条1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main()&#123; int f[60][60][60][60]; int a[60][60]; int n, m; cin &gt;&gt; n &gt;&gt; m; for (int i=1; i&lt;=n; i++) &#123; for (int j=1; j&lt;=m; j++) &#123; cin &gt;&gt; a[i][j]; &#125; &#125; for (int i=1; i&lt;=n; i++) &#123; for (int j=1; j&lt;=m; j++)&#123; for (int x=1; x&lt;=n; x++) &#123; for (int y=1; y&lt;=m; y++) &#123; int b=max(f[i-1][j][x-1][y], f[i-1][j][x][y-1]), c=max(f[i][j-1][x-1][y], f[i][j-1][x][y-1]); f[i][j][x][y] = max(b,c); if (i==x &amp;&amp; j==y) f[i][j][x][y] += a[i][j]; else f[i][j][x][y] += a[i][j]+a[x][y]; &#125; &#125; &#125; &#125; cout &lt;&lt; f[n][m][n][m]; return 0;&#125; #D. CDay3P1 最长公共子序列【基础】1234567891011121314151617181920212223242526#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;string s, t;int f[3001][3001], n, m;int dp() &#123; for (int i=1; i&lt;n; i++) &#123; for (int j=1; j&lt;m; j++) if (s[i] == t[j]) f[i][j] = f[i-1][j-1]+1; else f[i][j] = max(f[i-1][j], f[i][j-1]); &#125; return f[n-1][m-1];&#125;int main() &#123; cin &gt;&gt; s &gt;&gt; t; s = &#x27; &#x27;+s; t = &#x27; &#x27;+t; n = s.size(); m = t.size(); cout &lt;&lt; dp(); return 0;&#125; #E. CDay3P2 [NOIP 1999 提高组] 导弹拦截1234567891011121314151617181920212223242526272829#include&lt;bits/stdc++.h&gt;using namespace std;int n, ma, d[100001], a[100001], k, x[100001], xl=1, t, len=1;int main() &#123; ios::sync_with_stdio(false); x[1] = 0x7fffffff; while (cin &gt;&gt; a[++n]); d[1] = a[1]; for(int i=2; i&lt;=n;i++) &#123; if(a[i]&lt;=d[len]) d[++len] = a[i]; else d[upper_bound(d+1,d+len+1,a[i], greater&lt;int&gt;())-d] = a[i]; &#125; cout &lt;&lt; len-1 &lt;&lt; endl; for(int i=1;i&lt;=n;i++) &#123; t = !0; if (x[xl] &lt; a[i]) &#123; xl++; x[xl] = a[i]; &#125; else &#123; int k = lower_bound(x+1,x+xl+1,a[i])-x; x[k] = a[i]; &#125; &#125; cout &lt;&lt; xl; return 0;&#125; #F. CDay3P3 导弹拦截（大数据）123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int MAXN = 1000005;int n=0, a[MAXN], d[MAXN], x[MAXN], len=0, xl=0;int main() &#123; ios::sync_with_stdio(false); cin.tie(nullptr); while (cin &gt;&gt; a[++n]); n--; d[len=1] = a[1]; for (int i=2; i&lt;=n; i++) &#123; if (a[i] &lt;= d[len]) d[++len] = a[i]; else &#123; int* pos = upper_bound(d+1, d+len+1, a[i], greater&lt;int&gt;()); *pos = a[i]; &#125; &#125; cout &lt;&lt; len &lt;&lt; endl; x[xl=1] = a[1]; for (int i=2; i&lt;=n; i++) &#123; if (a[i] &gt; x[xl]) x[++xl] = a[i]; else &#123; int* pos = lower_bound(x+1, x+xl+1, a[i]); *pos = a[i]; &#125; &#125; cout &lt;&lt; xl; return 0;&#125; #G. CDay3P6 快速幂123456789101112131415161718192021222324#include &lt;iostream&gt;using namespace std;long long q(long long a, long long n, long long mod)&#123; long long ans = 1; a %= mod; while (n &gt; 0) &#123; if (n%2 == 1) &#123; ans = (ans*a)%mod; &#125; a = (a*a)%mod; n /= 2; &#125; return ans;&#125;int main() &#123; long long a, n, mod; cin &gt;&gt; a &gt;&gt; n &gt;&gt; mod; long long s = q(a, n, mod); cout &lt;&lt; s; return 0;&#125; #H. CDay3P5 ab斐波那契数列（大数据）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;struct matrix &#123; long long m[2][2]; matrix() &#123; memset(m, 0, sizeof(m)); &#125;&#125;;long long a, b, n, mo;matrix operator * (const matrix&amp;x, const matrix&amp;y) &#123; matrix res; res.m[0][0] = (x.m[0][0]*y.m[0][0]+x.m[0][1]*y.m[1][0])%mo; res.m[0][1] = (x.m[0][0]*y.m[0][1]+x.m[0][1]*y.m[1][1])%mo; res.m[1][0] = (x.m[1][0]*y.m[0][0]+x.m[1][1]*y.m[1][0])%mo; res.m[1][1] = (x.m[1][0]*y.m[0][1]+x.m[1][1]*y.m[1][1])%mo; return res;&#125;matrix mat_pow(matrix base, long long exp) &#123; matrix res; res.m[0][0]=1, res.m[0][1]=0, res.m[1][0]=0, res.m[1][1]=1; while (exp) &#123; if (exp &amp; 1) res = res*base; base = base*base; exp &gt;&gt;= 1; &#125; return res;&#125;int main() &#123; cin &gt;&gt; a &gt;&gt; b &gt;&gt; n &gt;&gt; mo; if (n==1 || n==2) &#123; cout &lt;&lt; 1%mo &lt;&lt; endl; return 0; &#125; matrix trans; trans.m[0][0]=a, trans.m[0][1]=b, trans.m[1][0]=1, trans.m[1][1]=0; matrix result = mat_pow(trans, n-2); long long F_n = (result.m[0][0]+result.m[0][1])%mo; cout &lt;&lt; F_n; return 0;&#125; #I. CDay3P7 搬运游戏Programming… Please wait. #J. CDay3P8 搬运游戏（大数据）Programming… Please wait.","categories":[{"name":"FOI2025","slug":"FOI2025","permalink":"http://example.com/categories/FOI2025/"}],"tags":[{"name":"答案","slug":"答案","permalink":"http://example.com/tags/%E7%AD%94%E6%A1%88/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"FOI2025算法夏令营C班day2——搜索算法 参考答案","slug":"foi2025-sssf","date":"2025-07-14T11:48:12.000Z","updated":"2025-07-15T10:11:09.592Z","comments":true,"path":"2025/07/14/foi2025-sssf/","permalink":"http://example.com/2025/07/14/foi2025-sssf/","excerpt":"","text":"代码仅供参考·2025年7月14日8时30分(Day2)·搜索算法·C++最后更新于：2025-07-14 19:58:26别被 “我学不会” 的念头困住。编程就像拼图，从最小的模块开始，拼着拼着，你就会突然看清整体的轮廓。 #A. P44 特殊的四位数字12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt; using namespace std;int n, nums[100]=&#123;1&#125;;bool a[100];void prt(int step) &#123; for (int i=1; i&lt;=4; i++) cout &lt;&lt; nums[i]; cout &lt;&lt; endl;&#125;void dfs(int step, int has) &#123; if (step &gt; 4) return ; for(int i=nums[step-1]; i&lt;=has&amp;&amp;i&lt;n&amp;&amp;i&lt;=9; i++)&#123; if(!a[i]) &#123; a[i] = true; nums[step] = i; has -= i; if(has==0 &amp;&amp; step==4)prt(step); else dfs(step+1, has); has += i; a[i] = false; &#125; &#125;&#125;int main() &#123; cin &gt;&gt; n; dfs(1, n); return 0; &#125; #B. P45 最大黑区域123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;using namespace std;int n, m, a[110][110], cnt, ans;int max(int a, int b) &#123; return a&gt;b?a:b;&#125;void dfs(int x, int y) &#123; if (x&lt;1 || x&gt;n || y&lt;1 || y&gt;m || !a[x][y]) return; a[x][y] = 0; cnt++; dfs(x-1, y); dfs(x+1, y); dfs(x, y-1); dfs(x, y+1);&#125;int main () &#123; cin &gt;&gt; n &gt;&gt; m; for (int i=1; i&lt;=n; i++) for (int j=1; j&lt;=m; j++) cin &gt;&gt; a[i][j]; for (int i=1; i&lt;=n; i++) for (int j=1; j&lt;=m; j++) if (a[i][j]) &#123; cnt = 0; dfs(i, j); ans = max(ans, cnt); &#125; cout &lt;&lt; ans;&#125; #C. P46 奇怪的电梯123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;struct node &#123; int x, y;&#125;;int n, a, b, k[205];bool vis[205];queue&lt;node&gt; q;int bfs() &#123; q.push(&#123;a, 0&#125;); vis[a] = true; while (!q.empty()) &#123; int x=q.front().x, y=q.front().y; q.pop(); if (x == b) return y; int x_new, y_new; x_new = x+k[x]; y_new = y+1; if (x_new&gt;=1 &amp;&amp; x_new&lt;=n &amp;&amp; !vis[x_new]) &#123; q.push(&#123;x_new, y_new&#125;); vis[x_new] = true; &#125; x_new = x-k[x]; y_new = y+1; if (x_new&gt;=1 &amp;&amp; x_new&lt;=n &amp;&amp; !vis[x_new]) &#123; q.push(&#123;x_new, y_new&#125;); vis[x_new] = true; &#125; &#125; return -1;&#125;int main() &#123; cin &gt;&gt; n &gt;&gt; a &gt;&gt; b; for (int i=1; i &lt;= n; i++) cin &gt;&gt; k[i]; cout &lt;&lt; bfs(); return 0;&#125; #D. P55 细胞1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;iostream&gt;using namespace std;struct node &#123; int x, y;&#125;q[10000];char ma[101][101];int n, m, ans, dx[4]=&#123;0, 0, 1, -1&#125;, dy[4]=&#123;1, -1, 0, 0&#125;;void bfs(int i, int j) &#123; int front=0, rear=1; q[1].x = i; q[1].y = j; ma[i][j] = &#x27;0&#x27;; while (front &lt; rear) &#123; front++; for (int i=0; i&lt;=3; i++) &#123; int x=q[front].x+dx[i]; int y=q[front].y+dy[i]; if (x&gt;=1 &amp;&amp; x&lt;=n &amp;&amp; y&gt;=1 &amp;&amp; y&lt;=m &amp;&amp; ma[x][y]!=&#x27;0&#x27;) &#123; rear++; q[rear].x = x; q[rear].y = y; ma[x][y] = &#x27;0&#x27;; &#125; &#125; &#125;&#125;int main() &#123; cin &gt;&gt; n &gt;&gt; m; for (int i=1; i&lt;=n; i++) for (int j=1; j&lt;=m; j++) cin &gt;&gt; ma[i][j]; for (int i=1; i&lt;=n; i++) for (int j=1; j&lt;=m; j++) if (ma[i][j]!=&#x27;0&#x27;) &#123; ans++; bfs(i, j); &#125; cout &lt;&lt; ans; return 0;&#125; #E. P56 抓住那头牛1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;using namespace std;int dx[3]=&#123;-1,1,0&#125;, map[100010], n, k;struct node &#123; int x, t;&#125;q[100010];void bfs() &#123; int head=0,tail=1; q[1].x = n; q[1].t = 0; map[n] = 1; while (head &lt; tail) &#123; head++; dx[2] = q[head].x; for (int i=0; i&lt;3; i++)&#123; int x = q[head].x+dx[i]; if (x&gt;=0 &amp;&amp; x&lt;=100005 &amp;&amp; map[x]==0) &#123; tail++; q[tail].x = x; q[tail].t = q[head].t+1; map[x] = 1; if (x == k) &#123; cout &lt;&lt; q[tail].t; return; &#125; &#125; &#125; &#125;&#125;int main() &#123; cin &gt;&gt; n &gt;&gt; k; if (n == k) &#123; cout&lt;&lt;0; return 0; &#125; bfs(); return 0;&#125;","categories":[{"name":"FOI2025","slug":"FOI2025","permalink":"http://example.com/categories/FOI2025/"}],"tags":[{"name":"答案","slug":"答案","permalink":"http://example.com/tags/%E7%AD%94%E6%A1%88/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"FOI2025算法夏令营C班day1——基础数据结构 参考答案","slug":"foi2025-jiujjg","date":"2025-07-13T10:26:52.000Z","updated":"2025-07-14T12:00:03.042Z","comments":true,"path":"2025/07/13/foi2025-jiujjg/","permalink":"http://example.com/2025/07/13/foi2025-jiujjg/","excerpt":"","text":"代码仅供参考·2025年7月13日8时30分(Day1)·基础数据结构·C++最后更新于：2025-07-13 21:33:30编程的路上没有捷径，但有积累的复利 —— 今天敲下的 100 行，会成为明天解决复杂问题的底气。 #A. P33 括弧匹配检验1234567891011121314151617181920212223242526#include &lt;iostream&gt;using namespace std;int main() &#123; char c, s[300], top=0; while (cin &gt;&gt; c) &#123; if (c==&#x27;(&#x27; || c==&#x27;[&#x27;) s[++top] = c; if (c == &#x27;)&#x27;) &#123; if (s[top] == &#x27;(&#x27;) top--; else &#123; cout &lt;&lt; &quot;Wrong&quot;; return 0; &#125; &#125; if (c == &#x27;]&#x27;) &#123; if (s[top] == &#x27;[&#x27;) top--; else &#123; cout &lt;&lt; &quot;Wrong&quot;; return 0; &#125; &#125; &#125; if (top &gt; 0) cout &lt;&lt; &quot;Wrong&quot;; else cout &lt;&lt; &quot;OK&quot;; return 0;&#125; #B. P54 后缀表达式的值12345678910111213141516171819202122232425#include &lt;iostream&gt;using namespace std;long long stack[251], x, y;string s;int main() &#123; getline(cin, s, &#x27;@&#x27;); int len = s.size(), top=0; for (int i=0; i&lt;len; i++) &#123; y = stack[top]; if (s[i] == &#x27;+&#x27;) stack[--top] += y; else if (s[i] == &#x27;-&#x27;) stack[--top] -= y; else if (s[i] == &#x27;*&#x27;) stack[--top] *= y; else if (s[i] == &#x27;/&#x27;) stack[--top] /= y; else if (s[i] == &#x27; &#x27;); else &#123; x = 0; while (s[i] != &#x27; &#x27;) x = x*10+s[i++]-48; stack[++top] = x; &#125; &#125; cout &lt;&lt; stack[top]; return 0;&#125; #C. P41 点赞热度12345678910111213141516171819#include &lt;iostream&gt;using namespace std;int main() &#123; int n, k, t, dzs=0, ans=0, q[100001], front=1, rear=0; cin &gt;&gt; n &gt;&gt; k; for (int i=1; i&lt;=n; i++) &#123; cin &gt;&gt; t; while (t-q[front]&gt;=60 &amp;&amp; front&lt;=rear) &#123; dzs--; front++; &#125; q[++rear] = t; dzs++; if (dzs &gt;= k) ans++; &#125; cout &lt;&lt; ans; return 0;&#125; #D. P42 单词数123456789101112131415161718192021#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;set&gt;using namespace std;int main() &#123; set&lt;string&gt; s; string str, t; while (getline(cin, str)) &#123; for (int i=0; i&lt;str.size(); i++) &#123; int j=i; while (str[j]!=&#x27; &#x27; &amp;&amp; j&lt;str.size()) j++; t = str.substr(i, j-i); i = j; s.insert(t); &#125; cout &lt;&lt; s.size() &lt;&lt; endl; s.clear(); &#125; return 0;&#125; #E. P43 新生舞会12345678910111213141516171819202122232425#include &lt;iostream&gt;#include &lt;map&gt;using namespace std;map&lt;string, char&gt; ma;map&lt;string, char&gt;::iterator it;int n, m;string name, id, a, b;char xb;int main() &#123; cin &gt;&gt; n; while (n--) &#123; cin &gt;&gt; name &gt;&gt; id &gt;&gt; xb; ma.insert(&#123;name, xb&#125;); ma.insert(&#123;id, xb&#125;); &#125; cin &gt;&gt; m; while (m--) &#123; cin &gt;&gt; a &gt;&gt; b; if (ma[a] != ma[b]) cout &lt;&lt; &#x27;Y&#x27; &lt;&lt; endl; else cout &lt;&lt; &#x27;N&#x27; &lt;&lt; endl; &#125; return 0;&#125; #F. P57 [CSP2019 Junior T2] 公交换乘123456789101112131415161718192021222324252627#include &lt;iostream&gt;using namespace std;int main()&#123; int p[100005], t[100005], front=1, rear=0, n, tool, price, time, ans=0, i; cin &gt;&gt; n; while (n--) &#123; cin &gt;&gt; tool &gt;&gt; price &gt;&gt; time; if(tool == 0) &#123; rear++; p[rear] = price; t[rear] = time; ans += price; &#125; else &#123; while (front&lt;=rear &amp;&amp; time-t[front]&gt;45) front++; for (i=front; i&lt;=rear; i++) if(p[i] &gt;= price)&#123; p[i] = 0; break; &#125; if(i&gt;rear)ans+=price; &#125; &#125; cout &lt;&lt; ans; return 0;&#125; #G. P64 [NOIP2016普及组T3]海港1234567891011121314151617181920212223242526#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int n, k, t, gj, tong[100001], ti[300001], na[300005], front=1, rear=0, cnt=0;int main()&#123; cin &gt;&gt; n; while (n--) &#123; cin &gt;&gt; t &gt;&gt; k; while (k--) &#123; cin &gt;&gt; gj; ti[++rear] = t; na[rear] = gj; tong[gj]++; if (tong[gj] == 1) cnt++; &#125; while (t-ti[front] &gt;= 86400) &#123; tong[na[front]]--; if (tong[na[front]] == 0) cnt--; front++; &#125; cout &lt;&lt; cnt &lt;&lt; endl; &#125; return 0;&#125;","categories":[{"name":"FOI2025","slug":"FOI2025","permalink":"http://example.com/categories/FOI2025/"}],"tags":[{"name":"答案","slug":"答案","permalink":"http://example.com/tags/%E7%AD%94%E6%A1%88/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"【公告】更改网站字体","slug":"anncmnt-20250518_102625","date":"2025-05-18T02:26:25.000Z","updated":"2025-05-18T03:02:10.435Z","comments":true,"path":"2025/05/18/anncmnt-20250518_102625/","permalink":"http://example.com/2025/05/18/anncmnt-20250518_102625/","excerpt":"","text":"更改网站域名在jsDelivr（用于加速存储在Github的自定义字体，加载需要一定时间）可以正常访问的情况下，网站将会显示： （优先级从左往右） 标题字体：MiSans, PingFang SC, Microsoft YaHei, Helvetica, Arial 正文字体：MiSans, PingFang SC, Microsoft YaHei, Helvetica, Arial 代码字体：JetBrains Maple Mono, Menlo, Monaco, Cascadia Mono, Consolas （自定义字体优先，macOS和Windows默认字体备用） ↓代码段↓ 1234567891011121314151617181920custom_css: fontfamily: logofont: fontfamily: &#x27;MiSans, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, Helvetica, Arial&#x27; name: &#x27;MiSans&#x27; url: https://gcore.jsdelivr.net/gh/FeatherBlaze/fonts/MiSans/MiSans-Regular.ttf weight: normal style: normal bodyfont: fontfamily: &#x27;&quot;MiSans&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, Helvetica, Arial&#x27; name: &#x27;MiSans&#x27; url: https://gcore.jsdelivr.net/gh/FeatherBlaze/fonts/MiSans/MiSans-Regular.ttf weight: normal style: normal codefont: fontfamily: &#x27;&quot;JetBrains Maple Mono&quot;, Menlo, Monaco, &quot;Cascadia Mono&quot;, &quot;Consolas&quot;&#x27; name: &#x27;JetBrains Maple Mono&#x27; url: https://gcore.jsdelivr.net/gh/FeatherBlaze/fonts/JetBrainsMapleMono/JetBrainsMapleMono-Regular.ttf weight: normal style: normal 原因这将提供更好的阅读体验。","categories":[{"name":"公告","slug":"公告","permalink":"http://example.com/categories/%E5%85%AC%E5%91%8A/"}],"tags":[{"name":"公告","slug":"公告","permalink":"http://example.com/tags/%E5%85%AC%E5%91%8A/"}]},{"title":"【公告】更改网站域名","slug":"anncmnt-20250505_173902","date":"2025-05-05T09:39:02.000Z","updated":"2025-05-18T04:08:26.479Z","comments":true,"path":"2025/05/05/anncmnt-20250505_173902/","permalink":"http://example.com/2025/05/05/anncmnt-20250505_173902/","excerpt":"","text":"更改网站域名网站域名将被更改为“fbblog.pages.dev”，访问旧域名将会自动跳转到新域名。 原因原域名使用GitHub Pages默认域名，服务器在国外，国内加载较慢。现域名使用Cloudflare Pages域名，国内有服务器，加载速度更快。","categories":[{"name":"公告","slug":"公告","permalink":"http://example.com/categories/%E5%85%AC%E5%91%8A/"}],"tags":[{"name":"公告","slug":"公告","permalink":"http://example.com/tags/%E5%85%AC%E5%91%8A/"}]},{"title":"【免费】Github+PicGo+jsDelivr搭建属于你的稳定图床","slug":"free-imagehost","date":"2025-05-04T10:41:05.000Z","updated":"2025-05-18T02:58:11.172Z","comments":true,"path":"2025/05/04/free-imagehost/","permalink":"http://example.com/2025/05/04/free-imagehost/","excerpt":"","text":"在写作和搭建博客时，要让其他人也能看到文档中的图片，要么把图片拷给别人，要么将图片上传。可上传图片需要服务器，免费的图床随时有跑路的风险。不想花钱，怎么办？ 如果你也有同样的困扰，那么，你来对地方了。这篇文章可以帮助你搭建一个属于你免费、稳定、不限空间的图床。 STEP1 创建一个Github仓库打开Github，如果打不开可以使用Watt Toolkit（原名Steam++）加速（不成功点加速设置&gt;安装证书）。如果没有Github账户就创建一个账户（需要邮箱）。新建一个仓库，名称随意（如images），其他默认，然后拉到底点击“Create repository”。 STEP2 获取Token打开Github，点击右上角头像&gt;“Settings”&gt;“Developer settings”&gt;“Personal access tokens”&gt;“Tokens (classic)”，选择“Generate new token”&gt;“Generate new token (classic)”。输入账户密码，“Note”随便填（如PicGo），Expiration选择“No expiration”，“Select scopes”，然后点击“Generate token”。复制生成的Token，保存好，过会儿将无法看到Token。 STEP3 下载并配置PicGoPicGo是一个开源的图片上传工具，可以在Github下载，但国内速度比较慢，推荐自行搜索安装包。 下载后打开，找到右下角（Windows）或右上角（macOS）的托盘图标（如果找不到在隐藏的图标里找），单击。选择PicGo设置，打开开机自启和时间戳重命名，“请选择显示的图床”只勾选Github。然后选择图床设置&gt;Github，“设定仓库名”：Github用户名&#x2F;创建的仓库名，“设定分支名”：main或master，“设定Token”：前面获取的Token，“设定存储路径”：随便填几个字母加&#x2F;（如img&#x2F;）或留空。 STEP4 jsDelivr加速图床现在就可以把图片拖到上传区了，可以复制多种格式的链接（如Markdown、URL），但可能上传失败或加载缓慢。如果在国内，推荐用jsDelivr加速图床。再次打开图床设置，“设定自定义域名”填写https://gcore.jsdelivr.net/gh/用户名/仓库名@分支名即可。 完成！现在，一个属于你免费、稳定、不限空间的图床就搭建完成了，你可以使用图床存储图片，让其他人也能看到网页、文档中的图片了。","categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"},{"name":"Github","slug":"教程/Github","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/Github/"}],"tags":[{"name":"图床","slug":"图床","permalink":"http://example.com/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"免费","slug":"免费","permalink":"http://example.com/tags/%E5%85%8D%E8%B4%B9/"},{"name":"Github","slug":"Github","permalink":"http://example.com/tags/Github/"},{"name":"jsDelivr","slug":"jsDelivr","permalink":"http://example.com/tags/jsDelivr/"}]},{"title":"【公告】迁移部分图片到图床","slug":"anncmnt-20250504_144654","date":"2025-05-04T05:46:54.000Z","updated":"2025-05-24T14:06:45.167Z","comments":true,"path":"2025/05/04/anncmnt-20250504_144654/","permalink":"http://example.com/2025/05/04/anncmnt-20250504_144654/","excerpt":"","text":"迁移图片到图床近期将迁移所有图片到图床。 原因网站内的图片保存在Github（且未使用加速），国内加载缓慢，严重影响网站加载速度及美观性。","categories":[{"name":"公告","slug":"公告","permalink":"http://example.com/categories/%E5%85%AC%E5%91%8A/"}],"tags":[{"name":"公告","slug":"公告","permalink":"http://example.com/tags/%E5%85%AC%E5%91%8A/"}]},{"title":"无须打开，立即中招！Win上古文件名Bug足以毁掉你的电脑！","slug":"filename-bug","date":"2025-05-03T07:33:03.000Z","updated":"2025-06-01T09:14:23.755Z","comments":true,"path":"2025/05/03/filename-bug/","permalink":"http://example.com/2025/05/03/filename-bug/","excerpt":"","text":"先逝试：将Python的主程序复制到桌面，然后将其重命名为： 100000000000000000000000000000000000000000000000000000000000000000~00000000000000000000000000000000000000000000000000000000000000000 咦？神奇的事情发生了：桌面不停黑屏，无法打开任何应用——系统正在不停地重启资源管理器（explore.exe）！ 为什么会发生这种事？具体原因可以参考边亮和epcdiy的这期视频，这篇文章只讲怎么复现和修复。 复现 该Bug可能已经在新版本中被修复，推荐使用Windows 7~Windows 11 22H2。 先将任意可以运行的exe应用程序（或ico文件）复制到桌面，然后重命名为大于130个字符且至少含有一个波浪符（~）的名称，即可复现。 当然，也可以编写一个批处理文件，名为start.bat，方便整蛊别人测试Bug，内容如下： 1copy &quot;.\\data\\00000000000000000000000000000000000000000000000000000000000000000~00000000000000000000000000000000000000000000000000000000000000000.exe&quot; &quot;%USERPROFILE%\\Desktop&quot; 这条cmd命令将当前文件夹下的data文件夹的“00000000000000000000000000000000000000000000000000000000000000000~00000000000000000000000000000000000000000000000000000000000000000.exe”复制到当前用户的桌面文件夹。只需要将其保存为start.bat，放在一个文件夹下，并创建一个data文件夹用于存放重命名过的文件，程序名称换成你的文件名，需要时运行start.bat即可。 修复整完别人测试完后，该如何让电脑恢复正常呢？ Ctrl+Alt+Del打开安全选项，右下角点击电源，按住Shift点重启，直到提示“请稍候”； 开机时进入高级选项，点击“疑难解答”-“高级选项”-“命令提示符”； 输入： 12345C:cd /Userscd 用户名cd Desktopdel 00000000000000000000000000000000000000000000000000000000000000000~00000000000000000000000000000000000000000000000000000000000000000.exe del后的文本换成你的文件名，也可以按Tab键找你的文件，如果，每个命令输入完成后按回车 结语怎么样，学废了吗？愣着干啥，快去整你的朋友啊！","categories":[{"name":"Windows","slug":"Windows","permalink":"http://example.com/categories/Windows/"}],"tags":[{"name":"Bug","slug":"Bug","permalink":"http://example.com/tags/Bug/"},{"name":"Win","slug":"Win","permalink":"http://example.com/tags/Win/"},{"name":"文件名","slug":"文件名","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E5%90%8D/"}]},{"title":"【VSCode美化】别人写代码怎么如此流畅？让我来拯救你的编辑器！","slug":"smooth-vscode","date":"2025-05-02T13:23:00.000Z","updated":"2025-05-27T05:17:14.217Z","comments":true,"path":"2025/05/02/smooth-vscode/","permalink":"http://example.com/2025/05/02/smooth-vscode/","excerpt":"","text":"引言别人的VSCode不光光标闪烁流畅，移动丝滑，而且滚动简直如同德芙一般；再看看自己的：光标僵硬，移动没动画，滚动连流畅都做不到……那就快来看看如何配置出“别人家的孩子吧！” 正片开始！方法1 | 使用设置(UI) 优点：界面人性化；缺点：较为麻烦。对JSON有一定了解的推荐使用方法二。 STEP1 打开设置 在菜单中打开 在VSCode菜单（Windows）或访达（macOS）中点击文件&gt;首选项&gt;设置。 在管理中打开 点击VSCode左下角的管理（齿轮图标）&gt;设置。 使用命令打开 点击VSCode顶部的搜索，输入以下内容后按回车或选择第一个选项： 1&gt;Preferences: Open Settings (UI) STEP2 更改设置在“搜索设置”中输入“smooth”，然后启用“Editor: Smooth Scrolling”（编辑器滚动动画）、“Workbench &gt; List: Smooth Scrolling”（设置等页面滚动动画）、“Terminal &gt; Integrated: Smooth Scrolling”（内置终端滚动动画），并将“Editor: Cursor Smooth Carte Animation”（鼠标移动动画）设为“on”，“Editor: Cursor Blinking”（鼠标闪烁动画）设为“smooth”，也可根据需要关闭。 方法2 | 使用用户设置(JSON) 优点：方便；缺点：较难更改。小白推荐使用方法一。 STEP1 打开设置点击VSCode顶部的搜索，输入以下内容后按回车或选择第一个选项： 1&gt;Preferences: Open User Settings (JSON) STEP2 更改设置在“setting.json”最后一行的“}”前一行末尾输入一个英文逗号并换行，然后输入以下文本后保存： 12345&quot;editor.smoothScrolling&quot;: true,&quot;editor.cursorSmoothCaretAnimation&quot;: &quot;on&quot;,&quot;workbench.list.smoothScrolling&quot;: true,&quot;terminal.integrated.smoothScrolling&quot;: true,&quot;editor.cursorBlinking&quot;: &quot;smooth&quot; !!!重要：如果其中一行或几行没有缩进，请在该行开头按“Tab”插入一个制表符!!! 结语现在，你已经拥有了丝滑流畅的VSCode：不光光标闪烁流畅，移动丝滑，而且滚动简直如同德芙一般。那么，VSCode德芙版，启动！𰻝","categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"},{"name":"Visual Studio Code","slug":"教程/Visual-Studio-Code","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/Visual-Studio-Code/"}],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"http://example.com/tags/VSCode/"},{"name":"美化","slug":"美化","permalink":"http://example.com/tags/%E7%BE%8E%E5%8C%96/"},{"name":"流畅","slug":"流畅","permalink":"http://example.com/tags/%E6%B5%81%E7%95%85/"}]}],"categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"},{"name":"极域课堂","slug":"教程/极域课堂","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/%E6%9E%81%E5%9F%9F%E8%AF%BE%E5%A0%82/"},{"name":"FOI2025","slug":"FOI2025","permalink":"http://example.com/categories/FOI2025/"},{"name":"公告","slug":"公告","permalink":"http://example.com/categories/%E5%85%AC%E5%91%8A/"},{"name":"Github","slug":"教程/Github","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/Github/"},{"name":"Windows","slug":"Windows","permalink":"http://example.com/categories/Windows/"},{"name":"Visual Studio Code","slug":"教程/Visual-Studio-Code","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/Visual-Studio-Code/"}],"tags":[{"name":"极域","slug":"极域","permalink":"http://example.com/tags/%E6%9E%81%E5%9F%9F/"},{"name":"答案","slug":"答案","permalink":"http://example.com/tags/%E7%AD%94%E6%A1%88/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"},{"name":"公告","slug":"公告","permalink":"http://example.com/tags/%E5%85%AC%E5%91%8A/"},{"name":"图床","slug":"图床","permalink":"http://example.com/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"免费","slug":"免费","permalink":"http://example.com/tags/%E5%85%8D%E8%B4%B9/"},{"name":"Github","slug":"Github","permalink":"http://example.com/tags/Github/"},{"name":"jsDelivr","slug":"jsDelivr","permalink":"http://example.com/tags/jsDelivr/"},{"name":"Bug","slug":"Bug","permalink":"http://example.com/tags/Bug/"},{"name":"Win","slug":"Win","permalink":"http://example.com/tags/Win/"},{"name":"文件名","slug":"文件名","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E5%90%8D/"},{"name":"VSCode","slug":"VSCode","permalink":"http://example.com/tags/VSCode/"},{"name":"美化","slug":"美化","permalink":"http://example.com/tags/%E7%BE%8E%E5%8C%96/"},{"name":"流畅","slug":"流畅","permalink":"http://example.com/tags/%E6%B5%81%E7%95%85/"}]}